---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Olegase.
--- DateTime: 01.05.2019 23:23
---

-- Вспомогательные функции

function highlight(seconds, elem, region)
    if Debug then
        if region ~= nil then
            region:getLastMatch():highlight(seconds)
        else
            if elem ~= nil then
                elem:highlight(seconds)
            else
                getLastMatch():highlight(seconds)
            end
        end
    end
end

function tableMerge(t1, t2, forbiddenRegs)
    for _, v in ipairs(t2) do
        if ((not isIncluded(t1, v)) and (forbiddenRegs == nil or not isInRegions(v, forbiddenRegs))) then
            table.insert(t1, v)
        end
    end
end

function compDistance(a, b)
    return getDistance(a) < getDistance(b);
end

function getDistance(elem)
    return ((elem:getX() - currentTargetLoc:getX())^2 + (elem:getY() - currentTargetLoc:getY())^2);
end

function isIncluded(table, elem2)
    for _, elem1 in ipairs(table) do
        if (math.abs(elem1:getX() - elem2:getX()) < 60 and  math.abs(elem1:getY() - elem2:getY()) < 60) then
            return true;
        end
    end
    return false;
end

function isInRegions(elem, regions)
    for _, reg in ipairs(regions) do
        if (isInRegion(elem, reg)) then
            return true;
        end
    end
    return false;
end

function isInRegion(elem, region)
    if (region:getX() < elem:getX() and elem:getX() < region:getX() + region:getW() and
            region:getY() < elem:getY() and elem:getY() < region:getY() + region:getH()) then
        return true;
    end
    return false;
end

function debugStatus(Text)
    if (Debug) then
        setHighlightTextStyle(0x70ff0000, 0xf8ffffff, 8);
        local tempStatus = Region(320, 5, 200, 25);
        tempStatus:highlight(Text);
        statusReg:highlightOff();
        statusReg = tempStatus;
        setHighlightTextStyle(0xf8666666, 0xf8ffffff, 16);
    end
end

function showAttempts()
    if (false) then
        setHighlightTextStyle(0x70ff0000, 0xf8ffffff, 8);
        local tempAttempts = Region(320, 35, 80, 25);
        tempAttempts:highlight("Attempts: "..attempts);
        attemptsReg:highlightOff();
        attemptsReg = tempAttempts;
        setHighlightTextStyle(0xf8666666, 0xf8ffffff, 16);
    end
end

function runCounter()
    if (runCounterCheck) then
        runCount = runCount + 1;
        setHighlightTextStyle(0x70ff0000, 0xf8ffffff, 8);
        local tempRunCounter = Region(530, 5, 50, 25);
        tempRunCounter:highlight("Run: "..runCount);
        runCounterReg:highlightOff();
        runCounterReg = tempRunCounter;
        setHighlightTextStyle(0xf8666666, 0xf8ffffff, 16);
    end
end

function isEmpty(list)
    return list == nil or (typeOf(list) ~= "userdata" and #list == 0)
end

function findAllMax(allImg, region, array, forbiddenRegs, allColor, enemy)
    snapshot();
    local list = array == nil and {} or array;
    local reg = region == nil and standardArea or region;
    for i, img in ipairs(allImg) do
        local tempList = checkColor(regionFindAllNoFindException(reg, img), allColor[i]);
        if (forbiddenRegs ~= nil) then
            tableMerge(list, tempList, forbiddenRegs);
        else
            tableMerge(list, tempList);
        end
    end
    if (enemy ~= nil) then
        currentTargetLoc = Location(enemy:getX(), enemy:getY());
        table.sort(list, compDistance);
    elseif (updateCurrentShipLocation()) then
        currentTargetLoc = Location(currentShipReg:getX(), currentShipReg:getY() + 170);
        table.sort(list, compDistance);
    end
    lastMatch = list;
    usePreviousSnap(false);
    return list;
end

function getLastMatches()
    return lastMatch;
end

function setScanIntervalPro(time)
    if (pro2Check) then
        setScanInterval(time);
    end
end

function isSameColor(elem, color)
    local spread = 10;
    if (#color == 6) then
        spread = color[6];
    end
    local r, g, b = getColor(Location(elem:getX() + color[4], elem:getY() + color[5]));
    if (math.abs(r - color[1]) < spread and math.abs(g - color[2]) < spread and math.abs(b - color[3]) < spread) then
        return true;
    end
    return false;
end

function checkColor(list, color)
    if (color == nil) then
        return list;
    end
    local t1 = {};
    for _, elem in ipairs(list) do
        if (isSameColor(elem, color)) then
            table.insert(t1, elem);
        end
    end
    return t1;
end