---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Olegase.
--- DateTime: 26.04.2019 21:33
---
-- TODO: Поиск босса по крестовой
-- TODO: Управляемое количество боев для каждого флота
-- TODO: Менять флот, когда упадет мораль

-- Settings
Settings:setCompareDimension(true, 1280);
Settings:setScriptDimension(true, 1280);
package.path = package.path..";"..scriptPath().."?.lua";
isAngle = false;
onlyBossIsLeft = false;
fleetChanged = false;
shipsMoraleChecked = false;
mapSelected = false;
unableToReachTargetLocationCheck = false;
attemptsToFightBoss = 1;
standardTimeInterval = 0.5;
acceleratedTimeInterval = 0.1;
countOfDefeatedFoes = 0;
runCount = 0;
standardSwipeCheck = true;

-- Functions

-- Функции для проверок в миссии

function checkAutoBattle()
    if (delayedAutoBattleCheck) then
        if (offReg:exists(on, 0.5)) then
            highlight(1, _, offReg);
            click(offReg:getLastMatch());
        elseif (autoBattleOffReg:exists(autoBattleOff, 0.5)) then
            click(autoBattleOffReg);
            if (cancelReg:exists(cancel, 1)) then
                highlight(1, _, cancelReg);
                click(cancelReg:getLastMatch());
            end
        end
    elseif (autoBattleCheck and not checkAutoBattleDone) then
        debugStatus("Checking auto battle");
        if (offReg:exists(off, 1)) then
            highlight(1, _, offReg);
            click(offReg:getLastMatch());
            if (cancelReg:exists(cancel, 1)) then
                highlight(1, _, cancelReg);
                click(cancelReg:getLastMatch());
            end
            checkAutoBattleDone = true;
        end
    end
end

function checkAmbush()
    debugStatus("Checking ambush");
    if (ambushReg:exists(ambush, 1)) then
        highlight(1, _, ambushReg);
        click(evadeReg);
        return true;
    end
    return false
end

function checkOnlyBossIsLeft()
    if (unableToReachTargetLocationCheck) then
        attempts = attempts - 1;
        return false;
    end
    goToTheAngle();
    debugStatus("Checking only boss is left")
    resetAttempts();
    local enemies = findAllMax(allFoe[1], battleArea, _, forbiddenRegs, allFoe[2]);
    while ((isEmpty(enemies) or (#enemies < 2 and searchBoss(enemies[1]))) and attempts > 0) do
        swipeDiagonal();
        enemies = findAllMax(allFoe[1], battleArea, _, forbiddenRegs, allFoe[2]);
    end
    onlyBossIsLeft = (attempts == 0);
    resetAttempts();
    return onlyBossIsLeft;
end

function checkHaveStartedBattle()
    debugStatus("Checking having started battle");
    if (not updateCurrentShipLocation()) then
        return false;
    end
    retreatReg = Region(currentShipReg:getX() + 70, currentShipReg:getY() + 50, 110, 110);
    if (findAllMax(retreatAll, retreatReg, _, _, retreatColorAll)) then
        for _, elem in ipairs(getLastMatches()) do
            local r, g, b = getColor(Location(elem:getX() + 9, elem:getY()));
            if (r * 2 - g - b ~= 0) then
                highlight(1, elem);
                local target = Location(elem:getX() - 80, elem:getY());
                click(target);
                return true;
            end
        end
    end
    return false;
end

function checkMissionCompleted()
    return missionModeReg:exists(attack2, 1.5);
end

function checkCurrentInMission()
    debugStatus("Checking current in mission");
    return switchReg:exists(switch, 0.5);
end

function checkAccessiblePath()
    debugStatus("Checking accessible path");
    setScanIntervalPro(0.2);
    local result = messageBoxReg:exists(unableToReachTargetLocation, 1) or handleUnexpectedConfirm();
    setScanIntervalPro(standardTimeInterval);
    unableToReachTargetLocationCheck = result;
    if (result) then
        messageBoxReg:waitVanish(unableToReachTargetLocation);
    end
    return not result;
end

function resetAttempts()
    attempts = 4;
end

function checkUnexpectedExitButton()
    debugStatus("Checking unexpected exit button");
    if (exitButtonReg:exists(exitButton, 0.5)) then
        click(exitButtonReg);
    end
end

function resetMissionSettings()
    runCounter();
    allFoe = allLv;
    resetAttempts();
    onlyBossIsLeft = false;
    fleetChanged = false;
    unableToReachTargetLocationCheck = false;
    bossElem = nil;
    shipsMoraleChecked = false;
    countOfDefeatedFoes = 0;
end

function checkShipsMorale()
    if ((not isEmpty(alternativeMobsKillerIndex)) and (not shipsMoraleChecked) and exists(green, 0.5) and (not fleetChanged)) then
        debugStatus("Checking morale");
        highlight(1);
        local flag = mobsKillerIndex == bossKillerIndex;
        mobsKillerIndex = alternativeMobsKillerIndex[Number];
        if (flag) then
            bossKillerIndex = mobsKillerIndex;
        end
        if (#alternativeMobsKillerIndex > Number) then
            Number = Number + 1;
        end
        shipsMoraleChecked = true;
    end
end

-- Функции для реакций на действия в битве

function handleUnexpectedConfirm()
    debugStatus("Handle unexpected confirm");
    if (confirmReg2:exists(confirm2, 0.5)) then
        highlight(1, _, confirmReg2);
        click(confirmReg2:getLastMatch());
        return true;
    end
    return false;
end

function updateCurrentShipLocation()
    setScanIntervalPro(0);
    local ship = exists(currentShip, 0.5);
    setScanIntervalPro(standardTimeInterval);
    if ship ~= nil then
        currentShipReg = Region(ship:getX(), ship:getY(), 180, 80);
        return true;
    end
    return false;
end

function handleAmbush(enemy)
    attemptsToReachEnemy = 5;
    while (not battleButtonReg:exists(battleButton, 2)) do
        click(enemy);
        checkAmbush();
        if (pauseButtonReg:exists(pauseButton, 1.5)) then
            highlight(1, _, pauseButtonReg);
            return;
        end
        if (attemptsToReachEnemy == 0) then
            print("Can't reach this enemy:");
            print(enemy);
            enemy:highlight();
            standardArea:save("Bug"..time:check()..".png");
            wait(5);
            enemy:highlightOff();
            print("You can find screenshot with problem place in "..scriptPath().."image/Bug*.png");
            return;
        end
        attemptsToReachEnemy = attemptsToReachEnemy - 1;
        debugStatus("Search battle button: "..attemptsToReachEnemy);
    end
    highlight(1, _, battleButtonReg);
    wait(1);
end

function handleDockIsFull()
    debugStatus("Checking dock if full");
    if (dockIsFullReg:exists(dockIsFull, 1)) then
        highlight(1, _, dockIsFullReg);
        usePreviousSnap(false);
        click(sortLoc);
        missionModeReg:wait(dock2);
        click(levelButtonReg);
        wait(0.5);
        click(rarityAllLoc);
        commonButtonReg:waitClick(commonButton);
        confirmReg4:waitClick(confirm3);
        wait(0.5);
        for _, loc in ipairs(pickAllLoc) do
            click(loc);
        end
        click(retireConfirmLoc1);
        wait(0.5);
        click(retireConfirmLoc2);
        wait(0.1);
        click(retireConfirmLoc2);
        wait(0.1);
        click(retireConfirmLoc2);
        wait(0.1);
        click(retireDisassembleLoc);
        wait(0.1);
        click(retireConfirmLoc2);
        wait(0.1);
        backReg:click(back);
        wait(1);
        return true;
    end
    return false;
end

function handleFindPathToItem(location)
    updateCurrentShipLocation();
    if (currentShipReg == nil) then
        return;
    end
    local counter = 5;
    while (math.abs(currentShipReg:getX() - location:getX()) > 50
            or math.abs(currentShipReg:getY() - location:getY() + 170) > 50) do
        debugStatus("Try to pick up item: "..counter);
        click(location);
        if (counter == 0) then
            return;
        end
        if (checkAmbush() or battleButtonReg:exists(battleButton, 0.5)) then
            fight();
            wait(1);
        end
        updateCurrentShipLocation();
        counter = counter - 1;
    end
end

-- Основные функции для боя

function battleMission(key)
    if (key == nil and not battleMissionCheck) then
        return;
    end
    time = Timer();
    snapshot();
    local goHomePage = (not missionModeReg:exists(attack2, 0.5)) and (not checkCurrentInMission());
    usePreviousSnap(false);
    if (goHomePage) then
        goHome();
        wait(1);
        goMission();
        wait(1);
    end
    debugStatus("Battle mission")
    if (count == 0) then
        count = 9999;
    end
    while (count > 0) do
        resetMissionSettings();
        if (not checkCurrentInMission()) then
            selectingMap();
            logInBattle();
            handleUnexpectedConfirm();
            wait(1);
        else
            countOfDefeatedFoes = 99;
        end
        if (checkHaveStartedBattle()) then
            wait(1);
            fight();
        end
        while (not checkMissionCompleted()) do
            searchBattle();
        end
        count = count - 1;
        wait(1);
    end
    print("Battle: Minutes: "..string.format("%.2f", time:check() / 60));
end

function searchBattle()
    debugStatus("Search battle");
    if (((not ignoreBossCheck) or onlyBossIsLeft) and searchBoss()) then --All screen
        highlight(1, getLastMatches()[1]);
        if (bossKillerIndex ~= mobsKillerIndex and not fleetChanged) then
            changeFleet();
            setBossVisible();
        end
        bossElem = getLastMatches()[1];
        if (preparingForFight(bossElem)) then
            return;
        else
            attemptsToFightBoss = 0;
        end
    elseif (countOfDefeatedFoes >= limitOfDefeatedFoes) then
        findAllMax({item}, battleArea, list, forbiddenRegs, {_})
        for _, elem in ipairs(getLastMatches()) do
            highlight(1, elem);
            click(Location(elem:getX() + 30, elem:getY() + 110));
            if (checkAccessiblePath()) then
                handleFindPathToItem(Location(elem:getX() + 30, elem:getY() + 110));
                wait(1.5);
                click(safeClickLoc);
                click(safeClickLoc);
                if (searchBoss()) then
                    return;
                end
            end
        end
    end
    if (searchOrdinaryFoe()) then
        local foes = getLastMatches();
        for _, foe in ipairs(foes) do
            if ((not searchBoss(foe)) or (#foes == 1 and onlyBossIsLeft)) then --Only enemy zone
                if (preparingForFight(foe)) then
                    attemptsToFightBoss = 1;
                    return;
                end
            elseif (#foes == 1 and not onlyBossIsLeft) then
                debugStatus("Attempts: "..attempts);
                isAngle = not checkOnlyBossIsLeft();
                return;
            end
        end
    end
    --Foe not found or can't reach target
    if (not isAngle) then
        goToTheAngle();
    end
    swipeDiagonal()
end

function searchBoss(enemy)
    if ((bossElem == nil and (attemptsToFightBoss == 0 or countOfDefeatedFoes < limitOfDefeatedFoes))
            or (unableToReachTargetLocationCheck and enemy == nil)) then
        return false;
    end
    debugStatus("Search boss");
    local searchZone;
    if (allFoe == allLv) then
        searchZone = enemy == nil and battleArea or Region(enemy:getX() - 80, enemy:getY() - 90, 160, 130);
    else
        searchZone = enemy == nil and battleArea or Region(enemy:getX() - 120, enemy:getY() - 110, 160, 130);
    end
    local result = isEmpty(findAllMax({boss}, searchZone, _, _, bossColorAll));
    if (not result) then
        highlight(1, lastMatch[1]);
    end
    return not result;
end

function setBossVisible()
    debugStatus("Set boss visible");
    if (not searchBoss()) then
        goToTheAngle();
        resetAttempts();
        while (not searchBoss()) do
            swipeDiagonal();
        end
    end
end

function searchOrdinaryFoe()
    debugStatus("Search ordinary foe");
    if (standardSwipeCheck and attempts <= 0) then
        isAngle = false;
        standardSwipeCheck = false;
    elseif (attempts <= 0) then
        changeFoe();
        isAngle = false;
        standardSwipeCheck = true;
    end
    if (attemptsToFightBoss == 0) then
        return findAllMax(allFoe[1], battleArea, list, forbiddenRegs, allFoe[2], bossElem);
    else
        return findAllMax(allFoe[1], battleArea, list, forbiddenRegs, allFoe[2]);
    end
end

function preparingForFight(enemy)
    debugStatus("Preparing for fight");
    highlight(1, enemy);
    click(enemy);
    if (checkAccessiblePath()) then
        handleAmbush(enemy);
        if (attemptsToReachEnemy == 0) then
            return false;
        end
        fight();
        return true;
    end
    return false;
end

function fight()
    checkUnexpectedExitButton();
    checkShipsMorale();
    checkAutoBattle();
    click(battleButtonReg:getCenter());
    wait(0.5);
    snapshot();
    if (handleDockIsFull()) then
        wait(0.5);
        click(battleButtonReg:getCenter());
    end
    if (messageBoxReg:exists(yourShipsOutOfOil, 1)) then
        usePreviousSnap(false);
        scriptExit("Your ships out of oil");
    end
    usePreviousSnap(false);
    debugStatus("Fight");
    click(battleButtonReg:getCenter());
    wait(20 / speedRate);
    checkAutoBattle();

    if (manualBattleCheck) then
        manualFight();
    else
        debugStatus("Tap to continue 1");
        setScanIntervalPro(2);
        tapToContinueReg:exists(tapToContinue, 300);
        setScanIntervalPro(standardTimeInterval);
        highlight(1, _, tapToContinueReg);
        click(tapToContinueReg:getLastMatch());
    end

    debugStatus("Tap confirm 1");
    while (not confirmReg1:exists(confirm1, 0.5)) do
        tapConfirmBadFlag = switchReg:exists(switch, 0.5) or confirmReg2:exists(confirm2, 0.5);
        if (tapConfirmBadFlag) then
            break;
        end
        click(tapToContinueReg);
    end
    if (not tapConfirmBadFlag) then
        highlight(1, _, confirmReg1);
        click(confirmReg1:getCenter());
    end
    wait(2);
    handleUnexpectedConfirm();
    resetAttempts();
    countOfDefeatedFoes = countOfDefeatedFoes + 1;
end

function manualFight()
    debugStatus("Manual fight");
    setScanIntervalPro(acceleratedTimeInterval);
    while true do
        if (aviationCheck) then
            if (confirmReg1:exists(confirm1, 0.3 / speedRate)) then
                break;
            end
            click(aviationLoc);
        end
        if (torpedoCheck) then
            if (confirmReg1:exists(confirm1, 0.3 / speedRate)) then
                break;
            end
            click(torpedoLoc);
        end
        if (artilleryCheck) then
            if (confirmReg1:exists(confirm1, 0.3 / speedRate)) then
                break;
            end
            click(artilleryLoc);
            click(moveLoc);
            wait(3.5 / speedRate);
        end
    end
    setScanIntervalPro(standardTimeInterval);
end

function goToTheLeftAngle()
    debugStatus("Go to the left angle")
    for _ = 1, 2 do
        swipe(center, Location(center:getX() * 1.9, center:getY() * 1.9))
    end
    isAngle = true
end

function goToTheRightAngle()
    debugStatus("Go to the right angle")
    for _ = 1, 2 do
        swipe(center, Location(center:getX() * 0.1, center:getY() * 1.9))
    end
    isAngle = true
end

function goToTheAngle()
    if (standardSwipeCheck) then
        goToTheLeftAngle();
    else
        goToTheRightAngle();
    end
end

function changeFleet()
    switchReg:exists(switch, 1);
    highlight(1, _, switchReg);
    click(switchReg:getLastMatch());
    fleetChanged = true;
    wait(2);
end

function selectingMap()
    if (normalReg:exists(normal)) then
        normalCheck = true;
    end
    if (not mapSelected) then
        debugStatus("Selecting map");
        local _, locTable, _ = getTouchEvent();
        missionReg = Region(locTable:getX() - 15, locTable:getY() - 15, 30, 30);
        inProgressReg2 = Region(missionReg:getX() - 120, missionReg:getY() - 120, 260, 260);
        mapSelected = true;
    end
end

function logInBattle()
    debugStatus("Log in battle");
    setScanIntervalPro(acceleratedTimeInterval);
    if (not inProgressReg2:exists(inProgress2, 1)) then
        setScanIntervalPro(standardTimeInterval);
        click(missionReg);
        highlight(1, goButtonReg1:exists(goButton1));
        click(goButtonReg1:getLastMatch());
        wait(0.5);
        if (handleDockIsFull()) then
            click(missionReg);
            highlight(1, goButtonReg1:exists(goButton1));
            click(goButtonReg1:getLastMatch());
            wait(0.5);
        end
        selectFleet();
        highlight(1, goButtonReg2:exists(goButton2));
        click(goButtonReg2:getLastMatch());
    else
        highlight(1, _, inProgressReg2);
        click(missionReg);
        countOfDefeatedFoes = 5;
    end
    setScanIntervalPro(standardTimeInterval);
    wait(1);
end

function selectFleet()
    if (normalCheck) then
        return;
    end
    debugStatus("Selecting fleet");
    click(SelectFleetClear2);
    click(SelectFleetClear3);
    click(SelectFleetChoose1);
    click(selectFleetReg:exists(selectFleetAll[mobsKillerIndex], 0.3) or selectFleetReg:exists(selectFleetAllSelected[mobsKillerIndex], 0.3));
    if (bossKillerIndex ~= mobsKillerIndex) then
        wait(0.2);
        click(SelectFleetChoose2);
        click(selectFleetReg:exists(selectFleetAll[bossKillerIndex], 0.3) or selectFleetReg:exists(selectFleetAllSelected[bossKillerIndex], 0.3));
    end
    if (submarineIndex ~= 3) then
        wait(0.2);
        click(SelectFleetChoose3);
        click(selectFleetReg:exists(selectFleetAll[submarineIndex], 0.3) or selectFleetReg:exists(selectFleetAllSelected[submarineIndex], 0.3));
    end
end

function swipeDiagonal()
    debugStatus("SwipeDiagonal")
    if (standardSwipeCheck and attempts > 0) then
        swipe(center, Location(center:getX() * 0.75, center:getY() * 0.45));
    elseif (attempts > 0) then
        swipe(center, Location(center:getX() * 1.25, center:getY() * 0.45));
    end
    attempts = attempts - 1;
    showAttempts();
end

function changeFoe()
    debugStatus("Change foe");
    if (allFoe == allLv) then
        allFoe = allEnemyRank;
    else
        allFoe = allLv;
    end
    resetAttempts();
end

-- Функции для порта

function settingsBot()
    settingOverall();
    if (battleMissionCheck or dailyMissionCheck or sosMissionCheck) then
        settingsFight();
    end
    if (battleMissionCheck or sosMissionCheck) then
        settingsFleetSelect();
        settingsAlternativeMobsKiller()
        settingsCombat();
    end
    if (dailyMissionCheck) then
        settingsDaily();
    end
end

function settingOverall()
    dialogInit();
    addTextView("-- Select modes");
    newRow();
    addCheckBox("battleMissionCheck", "Battle", true);
    newRow();
    addCheckBox("dailyMissionCheck", "Daily", true);
    newRow();
    addCheckBox("sosMissionCheck", "SoS Signal", true);
    newRow();
    addTextView("-- Select extra options");
    newRow();
    addCheckBox("pro2Check", "Optimization (Pro2 only)", true);
    newRow();
    addCheckBox("Debug", "Debug mode(Highlight actions and show box status)", false);
    newRow();
    dialogShow("Azur Lane Bot v1.2");
    setScanIntervalPro(standardTimeInterval);
end

function settingsFight()
    dialogInit();
    addTextView("-- Select fight's options");
    newRow();
    addCheckBox("autoBattleCheck", "Checking AutoBattle", true);
    newRow();
    addCheckBox("delayedAutoBattleCheck", "Checking AutoBattle with delay in combat", true);
    newRow();
    addTextView("-- Manual fight");
    newRow();
    addCheckBox("aviationCheck", "Auto aviation skill activation", false);
    newRow();
    addCheckBox("torpedoCheck", "Auto torpedo skill activation", false);
    newRow();
    addCheckBox("artilleryCheck", "Auto artillery skill activation", false);
    newRow();
    addTextView("   Skill activation speed rate(1 = 100%)");
    addEditNumber("speedRate", 1.0);
    newRow();
    dialogShow("Fight's settings");
    manualBattleCheck = aviationCheck or torpedoCheck or artilleryCheck;
end

function settingsFleetSelect()
    dialogInit();
    addTextView("-- Index number of mobs killer fleet should be lower than boss killer one");
    newRow();
    addTextView("-- Select fleet for mobs fight");
    newRow();
    addRadioGroup("mobsKillerIndex", 1);
    addRadioButton("First fleet", 1);
    addRadioButton("Second fleet", 2);
    addRadioButton("Third fleet", 3);
    addRadioButton("Fourth fleet", 4);
    newRow();
    addTextView("-- Select fleet for boss fight");
    newRow();
    addRadioGroup("bossKillerIndex", 1);
    addRadioButton("First fleet", 1);
    addRadioButton("Second fleet", 2);
    addRadioButton("Third fleet", 3);
    addRadioButton("Fourth fleet", 4);
    newRow();
    addTextView("-- Select submarine");
    newRow();
    addRadioGroup("submarineIndex", 1);
    addRadioButton("First fleet", 1);
    addRadioButton("Second fleet", 2);
    addRadioButton("Off", 3);
    newRow();
    addCheckBox("alternativeMobsKillerIndexCheck", "Replace mobs killer fleet when morale go low", false);
    newRow();
    dialogShow("Fleet Select");
end

function settingsAlternativeMobsKiller()
    if (not alternativeMobsKillerIndexCheck) then
        return;
    end
    dialogInit();
    addTextView("-- Index number of additional mobs killer fleet should be lower than boss killer one");
    newRow();
    addTextView("-- Select additional fleet for mobs fight");
    newRow();
    if ((mobsKillerIndex ~= 1 and bossKillerIndex > 1)
            or (mobsKillerIndex == bossKillerIndex and mobsKillerIndex ~= 1)) then
        addCheckBox("FirstFleet", "First fleet", true);
        newRow();
    else
        FirstFleet = false;
    end
    if ((mobsKillerIndex ~= 2 and bossKillerIndex > 2)
            or (mobsKillerIndex == bossKillerIndex and mobsKillerIndex ~= 2)) then
        addCheckBox("SecondFleet", "Second fleet", true);
        newRow();
    else
        SecondFleet = false;
    end
    if ((mobsKillerIndex ~= 3 and bossKillerIndex > 3)
            or (mobsKillerIndex == bossKillerIndex and mobsKillerIndex ~= 3)) then
        addCheckBox("ThirdFleet", "Third fleet", true);
        newRow();
    else
        ThirdFleet = false;
    end
    if (mobsKillerIndex == bossKillerIndex) then
        addCheckBox("FourthFleet", "Fourth fleet", true);
        newRow();
    else
        FourthFleet = false;
    end
    dialogShow("Additional Fleet Select");
    alternativeMobsKillerIndex = {};
    additionalFleets = {FirstFleet, SecondFleet, ThirdFleet, FourthFleet};
    for i, elem in ipairs(additionalFleets) do
        if (elem) then
            table.insert(alternativeMobsKillerIndex, i);
        end
    end
    Number = 1;
end

function settingsCombat()
    dialogInit();
    newRow();
    addCheckBox("ignoreBossCheck", "Ignore boss", false);
    newRow();
    addCheckBox("runCounterCheck", "Run counter", false);
    newRow();
    addTextView("-- Which angle to move camera in absence of enemies first");
    newRow();
    addRadioGroup("angleFirst", 1);
    addRadioButton("Left angle", 1);
    addRadioButton("Right angle", 2);
    newRow();
    addTextView("  After how many defeated enemies begin search boss: ");
    addEditNumber("limitOfDefeatedFoes", 4);
    newRow();
    if (battleMissionCheck) then
        addTextView("  Count battles(0 = inf)");
        addEditNumber("count", 0);
        newRow();
    end
    dialogShow("Mission's settings");
    resetAttempts();
    standardSwipeCheck = (angleFirst == 1);
end

function goHome()
    debugStatus("Go home");
    while not dockReg:exists(dock1, 1) do
        if backReg:exists(back, 1) then
            highlight(1, _, backReg);
            click(backReg:getLastMatch());
        elseif backDormReg:exists(backDorm, 1) then
            highlight(1, _, backDormReg);
            click(backDormReg:getLastMatch());
        end
    end
    highlight(1, _, dockReg);
end

function goMission()
    debugStatus("Go mission");
    attackReg:exists(attack1, 1);
    highlight(1, _, attackReg);
    click(attackReg:getLastMatch());
end

function goOrdinaryBattle()
    goHome();
    wait(1);
    goMission();
    wait(1);
    battleMission();
end

function goDaily()
    goHome();
    wait(1);
    goMission();
    wait(1);
    dailyMission();
end

-- Вспомогательные функции

function highlight(seconds, elem, region)
    if Debug then
        if region ~= nil then
            region:getLastMatch():highlight(seconds)
        else
            if elem ~= nil then
                elem:highlight(seconds)
            else
                getLastMatch():highlight(seconds)
            end
        end
    end
end

function tableMerge(t1, t2, forbiddenRegs)
    for _, v in ipairs(t2) do
        if ((not isIncluded(t1, v)) and (forbiddenRegs == nil or not isInRegions(v, forbiddenRegs))) then
            table.insert(t1, v)
        end
    end
end

function compDistance(a, b)
    return getDistance(a) < getDistance(b);
end

function getDistance(elem)
    return ((elem:getX() - currentTargetLoc:getX())^2 + (elem:getY() - currentTargetLoc:getY())^2);
end

function isIncluded(table, elem2)
    for _, elem1 in ipairs(table) do
        if (math.abs(elem1:getX() - elem2:getX()) < 60 and  math.abs(elem1:getY() - elem2:getY()) < 60) then
            return true;
        end
    end
    return false;
end

function isInRegions(elem, regions)
    for _, reg in ipairs(regions) do
        if (isInRegion(elem, reg)) then
            return true;
        end
    end
    return false;
end

function isInRegion(elem, region)
    if (region:getX() < elem:getX() and elem:getX() < region:getX() + region:getW() and
            region:getY() < elem:getY() and elem:getY() < region:getY() + region:getH()) then
        return true;
    end
    return false;
end

function debugStatus(Text)
    if (Debug) then
        setHighlightTextStyle(0x70ff0000, 0xf8ffffff, 8);
        local tempStatus = Region(320, 5, 200, 25);
        tempStatus:highlight(Text);
        statusReg:highlightOff();
        statusReg = tempStatus;
        setHighlightTextStyle(0xf8666666, 0xf8ffffff, 16);
    end
end

function showAttempts()
    if (false) then
        setHighlightTextStyle(0x70ff0000, 0xf8ffffff, 8);
        local tempAttempts = Region(320, 35, 80, 25);
        tempAttempts:highlight("Attempts: "..attempts);
        attemptsReg:highlightOff();
        attemptsReg = tempAttempts;
        setHighlightTextStyle(0xf8666666, 0xf8ffffff, 16);
    end
end

function runCounter()
    if (runCounterCheck) then
        runCount = runCount + 1;
        setHighlightTextStyle(0x70ff0000, 0xf8ffffff, 8);
        local tempRunCounter = Region(530, 5, 50, 25);
        tempRunCounter:highlight("Run: "..runCount);
        runCounterReg:highlightOff();
        runCounterReg = tempRunCounter;
        setHighlightTextStyle(0xf8666666, 0xf8ffffff, 16);
    end
end

function isEmpty(list)
    return list == nil or (typeOf(list) ~= "userdata" and #list == 0)
end

function findAllMax(allImg, region, array, forbiddenRegs, allColor, enemy)
    snapshot();
    local list = array == nil and {} or array;
    local reg = region == nil and standardArea or region;
    for i, img in ipairs(allImg) do
        local tempList = checkColor(regionFindAllNoFindException(reg, img), allColor[i]);
        if (forbiddenRegs ~= nil) then
            tableMerge(list, tempList, forbiddenRegs);
        else
            tableMerge(list, tempList);
        end
    end
    if (enemy ~= nil) then
        currentTargetLoc = Location(enemy:getX(), enemy:getY());
        table.sort(list, compDistance);
    elseif (updateCurrentShipLocation()) then
        currentTargetLoc = Location(currentShipReg:getX(), currentShipReg:getY() + 170);
        table.sort(list, compDistance);
    end
    lastMatch = list;
    usePreviousSnap(false);
    return list;
end

function getLastMatches()
    return lastMatch;
end

function setScanIntervalPro(time)
    if (pro2Check) then
        setScanInterval(time);
    end
end

function isSameColor(elem, color)
    local spread = 10;
    if (#color == 6) then
        spread = color[6];
    end
    local r, g, b = getColor(Location(elem:getX() + color[4], elem:getY() + color[5]));
    if (math.abs(r - color[1]) < spread and math.abs(g - color[2]) < spread and math.abs(b - color[3]) < spread) then
        return true;
    end
    return false;
end

function checkColor(list, color)
    if (color == nil) then
        return list;
    end
    local t1 = {};
    for _, elem in ipairs(list) do
        if (isSameColor(elem, color)) then
            table.insert(t1, elem);
        end
    end
    return t1;
end

-- Ежедневные задания

function settingsDaily()
    dialogInit();
    addCheckBox("tacticalTrainingCheck", "Tactical Training", true);
    newRow();
    addRadioGroup("tacticalTrainingRadioButton", 1);
    addRadioButton("Aviation", 1);
    addRadioButton("Shelling", 2);
    addRadioButton("Torpedo", 3);
    newRow();
    addTextView("-- Difficult of other daily");
    newRow();
    addRadioGroup("Difficult", 1);
    addRadioButton("Hard", 1);
    addRadioButton("Medium", 2);
    addRadioButton("Easy", 3);
    newRow();
    addTextView("-- Select fleet for daily");
    newRow();
    addRadioGroup("fleetDailyNumber", 1);
    addRadioButton("First", 1);
    addRadioButton("Second", 2);
    addRadioButton("Third", 3);
    addRadioButton("Fourth", 4);
    newRow();
    dialogShow("Daily");
    dailyRadioButtons = {tacticalTrainingRadioButton, Difficult, Difficult, Difficult};
end

function dailyMission()
    if (not (tacticalTrainingCheck or escortCargoCheck or maritimeAttackCheck or urgentOpsCheck)) then
        return;
    end
    local dailyMissionTime = Timer();
    if (not missionModeReg:exists(daily2, 1)) then
        goHome();
        wait(1);
        goMission();
        wait(1);
        dailyReg1:exists(daily1);
        highlight(1, _, dailyReg1);
        click(dailyReg1:getLastMatch());
        wait(1);
    end
    debugStatus("Daily mission");
    local today = os.date("%A", os.time(os.date("!*t")) - 25200);
    escortCargoCheck = (today == "Monday" or today == "Thursday" or today == "Sunday");
    maritimeAttackCheck = (today == "Tuesday" or today == "Friday" or today == "Sunday");
    urgentOpsCheck = (today == "Wednesday" or today == "Saturday" or today == "Sunday");
    groupsModeFlag = {tacticalTrainingCheck, maritimeAttackCheck, escortCargoCheck, urgentOpsCheck};
    for i, mode in ipairs(groupsModeFlag) do
        if (mode) then
            click(dailyModeReg);
            if (not messageBoxReg:exists(available, 1)) then
                local flag;
                while (not dailyAttemptsReg:exists(emptyDaily, 1)) do
                    flag = true;
                    pickDailyLevel(dailyRadioButtons[i]);
                    pickDailyFleet();
                    manualBattleCheck = (mode ~= escortCargoCheck);
                    fight();
                end
                backReg:click(back);
                wait(0.3);
                if (i == 4) then
                    break;
                end
                if (flag) then
                    for _ = 2, i do
                        click(nextDailyMode);
                        wait(0.3);
                    end
                end
            end
        end
        click(nextDailyMode);
        if (i == 3) then
            wait(0.3);
            click(nextDailyMode);
        end
    end
    print("Daily: Minutes: "..string.format("%.2f", dailyMissionTime:check() / 60));
end

function pickDailyLevel(index)
    click(dailyLevelLocAll[index]);
end

function pickDailyFleet()
    debugStatus("Pick daily fleet");
    if (not dailyFleetReg:exists(fleetAll[fleetDailyNumber], 1)) then
        local currentFleetNumber = getCurrentFleetNumber();
        while (currentFleetNumber - fleetDailyNumber > 0) do
            click(leftButtonLoc);
            currentFleetNumber = currentFleetNumber - 1;
        end
        while (currentFleetNumber - fleetDailyNumber < 0) do
            click(rightButtonLoc);
            currentFleetNumber = currentFleetNumber + 1;
        end
    end
end

function getCurrentFleetNumber()
    if (dailyFleetReg:exists(fleet1, 0.25)) then
        return 1;
    end;
    if (dailyFleetReg:exists(fleet2, 0.25)) then
        return 2;
    end;
    if (dailyFleetReg:exists(fleet3, 0.25)) then
        return 3;
    end;
    if (dailyFleetReg:exists(fleet4, 0.25)) then
        return 4;
    end;
end

function sosMission()
    if (not sosMissionCheck) then
        return;
    end
    local sosMissionTime = Timer();
    snapshot();
    local goHomePage = (not missionModeReg:exists(attack2, 0.5)) and (not checkCurrentInMission());
    usePreviousSnap(false);
    if (goHomePage) then
        goHome();
        wait(1);
        goMission();
        wait(1);
    end
    if (checkCurrentInMission()) then
        local tempCount = count;
        count = 1;
        battleMission(true);
        count = tempCount;
    end
    while (not sosMissionReg:exists(number0)) do
        click(sosMissionLoc);
        wait(0.5);
        if (not sosSignalGoReg:exists(go3, 1)) then
            click(searchSignalLcc);
            wait(3);
            confirmReg3:existsClick(confirm2);
        else
            highlight(1, _, sosSignalGoReg);
            click(sosSignalGoReg);
            wait(2);
        end
        missionReg = exists(submarine, 2);
        inProgressReg2 = (not missionReg) or Region(missionReg:getX() - 100, missionReg:getY() - 100, 220, 220);
        mapSelected = true;
        count = 1;
        battleMission(true);
        missionReg = nil;
        mapSelected = false;
    end
    print("SoS Signals: Minutes: "..string.format("%.2f", sosMissionTime:check() / 60));
end

-- Regions

-- Области

missionReg = nil;
inProgressReg2 = nil;
battleArea = Region(120, 55, 1160, 665);
standardArea = getGameArea();
battleButtonReg = Region(900, 570, 320, 140);
statusReg = Region(320, 5, 200, 25);
evadeReg = Region(780, 330, 250, 100);
ambushReg = Region(450, 270, 400, 50);
offReg = Region(120, 60, 120, 60);
cancelReg = Region(530, 480, 220, 90);
tapToContinueReg = Region(500, 540, 280, 60);
confirmReg1 = Region(1000, 560, 220, 100);
confirmReg2 = Region(530, 450, 220, 90);
confirmReg3 = Region(674, 452, 229, 89);
confirmReg4 = Region(649, 627, 218, 84);
switchReg = Region(830, 630, 220, 80);
goButtonReg1 = Region(820, 430, 220, 100);
goButtonReg2 = Region(960, 580, 220, 90);
messageBoxReg = Region(150, 300, 1000, 70);
dockIsFullReg = Region(410, 310, 460, 70);
currentShipReg = nil;
backReg = Region(0, 0, 90, 60);
backDormReg = Region(0, 0, 90, 60);
dockReg = Region(130, 650, 180, 70);
attackReg = Region(965, 345, 260, 110);
missionModeReg = Region(80, 0, 150, 50);
dailyReg1 = Region(673, 619, 196, 90);
dailyModeReg = Region(539, 67, 239, 569);
dailyAttemptsReg = Region(5, 583, 208, 128);
dailyFleetReg = Region(5, 118, 124, 71);
runCounterReg = Region(530, 5, 50, 25);
attemptsReg = Region(320, 35, 80, 25);
selectFleetReg = Region(961, 157, 232, 518);
pauseButtonReg = Region(1117, 17, 153, 72);
normalReg = Region(0, 609, 215, 114);
shipIconReg = Region(0, 66, 118, 652);
commandMenuReg = Region(579, 628, 689, 79);
starsReg = Region(1235, 97, 45, 105);
forbiddenRegs = {starsReg};
sosMissionReg = Region(1153, 495, 75, 65);
sosSignalGoReg = Region(822, 226, 168, 59);
exitButtonReg = Region(871, 152, 115, 81);
autoBattleOffReg = Region(22, 19, 72, 67);
levelButtonReg = Region(1078, 2, 179, 63);
commonButtonReg = Region(397, 548, 159, 67);

-- Colors

-- Цвета

lvColor = {246, 215, 70, 3, 17, 20};
lv2Color = {235, 200, 70, 4, 2, 30};
enemy_l3Color = {189, 48, 0, 8, 4, 20};
enemy_m2Color = {222, 160, 0, 4, 8, 20};
enemy_s2Color = {206, 180, 40, 5, 7, 40};
enemyRankColorAll = {enemy_l3Color, enemy_m2Color, enemy_s2Color};
retreatColorAll = {{251, 251, 244, 9, 0, 70}, _};
bossColor = {251, 76, 81, 4, 9, 20};
bossColorAll = {bossColor};

-- Objects

-- Объекты для боя

lv2 = Pattern("Lv2.png"):similar(0.8):targetOffset(-15, -15):mask();
allLv = {{lv2}, {lv2Color}};
allFoe = allLv;
tapToContinue = Pattern("tapToContinue.png"):similar(0.9);
battleButton = Pattern("DoBattle.png"):similar(0.9);
confirm1 = Pattern("Confirm.png"):similar(0.9);
confirm2 = Pattern("Confirm2.png"):similar(0.9);
confirm3 = Pattern("Confirm3.png"):similar(0.9);
switch = Pattern("Switch.png"):similar(0.9);
unableToReachTargetLocation = Pattern("UnableToReachTargetLocation.png"):similar(0.75);
cantReachTheTargetInThisTurn = Pattern("CantReachTheTargetInThisTurn.png"):similar(0.75);
boss = Pattern("Boss.png"):similar(0.7);
goButton1 = Pattern("Go.png"):similar(0.9);
goButton2 = Pattern("Go2.png"):similar(0.9);
inProgress2 = Pattern("InProgress2.png"):similar(0.9);
ambush = Pattern("Ambush.png"):similar(0.8);
evade = Pattern("Evade.png"):similar(0.8);
dockIsFull = Pattern("DockIsFull.png"):similar(0.9);
cancel = Pattern("Cancel.png"):similar(0.9);
off = Pattern("Off.png"):similar(0.9);
on = Pattern("On.png"):similar(0.9);
enemy_s2 = Pattern("Enemy_s2.png"):similar(0.92):targetOffset(15, 15):mask();
enemy_m2 = Pattern("Enemy_m2.png"):similar(0.88):targetOffset(15, 15):mask();
enemy_l3 = Pattern("Enemy_l3.png"):similar(0.88):targetOffset(15, 15):mask();
allEnemyRank = {{enemy_l3, enemy_m2, enemy_s2}, enemyRankColorAll};
currentShip = Pattern("CurrentShip.png"):similar(0.95);
retreat = Pattern("Retreat.png"):similar(0.6);
flee = Pattern("Flee.png"):similar(0.5);
retreatAll = {retreat, flee};
pauseButton = Pattern("PauseButton.png"):similar(0.9);
item = Pattern("Item.png"):similar(0.8);
yourShipsOutOfOil = Pattern("YourShipsOutOfOil.png"):similar(0.75);
submarine = Pattern("Submarine.png"):similar(0.85);
exitButton = Pattern("ExitButton.png"):similar(0.9);
autoBattleOff = Pattern("AutoBattleOff.png"):similar(0.9);

-- Объекты для порта

dock1 = Pattern("Dock.png"):similar(0.9);
dock2 = Pattern("Dock2.png"):similar(0.9);
back = Pattern("Back.png"):similar(0.9);
backDorm = Pattern("BackDorm.png"):similar(0.9);
normal = Pattern("Normal.png"):similar(0.9);
attack1 = Pattern("Attack.png"):similar(0.9);
attack2 = Pattern("Attack2.png"):similar(0.9);
daily1 = Pattern("Daily1.png"):similar(0.9);
daily2 = Pattern("Daily2.png"):similar(0.9);
available = Pattern("Available.png"):similar(0.9);
descending = Pattern("Descending.png"):similar(0.9);
commonButton = Pattern("CommonButton.png"):similar(0.9);
levelButton = Pattern("LevelButton.png"):similar(0.9);
firstFleet = Pattern("FirstFleet.png"):similar(0.9);
firstFleetSelected = Pattern("FirstFleetSelected.png"):similar(0.9);
secondFleet = Pattern("SecondFleet.png"):similar(0.9);
secondFleetSelected = Pattern("SecondFleetSelected.png"):similar(0.9);
thirdFleet = Pattern("ThirdFleet.png"):similar(0.9);
thirdFleetSelected = Pattern("ThirdFleetSelected.png"):similar(0.9);
fourthFleet = Pattern("FourthFleet.png"):similar(0.9);
fourthFleetSelected = Pattern("FourthFleetSelected.png"):similar(0.9);
selectFleetAll = {firstFleet, secondFleet, thirdFleet, fourthFleet};
selectFleetAllSelected = {firstFleetSelected, secondFleetSelected, thirdFleetSelected, fourthFleetSelected};
number0 = Pattern("0.png"):similar(0.9);
number2 = Pattern("2.png"):similar(0.9);
go3 = Pattern("Go3.png"):similar(0.9);
green = Pattern("Green.png"):similar(0.9);

-- Объекты для ежедневные

emptyDaily = Pattern("EmptyDaily.png"):similar(0.9);
escortCargo = Pattern("EscortCargo.png"):similar(0.9);
maritimeAttack = Pattern("MaritimeAttack.png"):similar(0.9);
tacticalTraining = Pattern("TacticalTraining.png"):similar(0.9);
urgentOps = Pattern("UrgentOps.png"):similar(0.9);
groupsMode = {tacticalTraining, maritimeAttack, escortCargo, urgentOps};
fleet1 = Pattern("Fleet1.png"):similar(0.99);
fleet2 = Pattern("Fleet2.png"):similar(0.99);
fleet3 = Pattern("Fleet3.png"):similar(0.99);
fleet4 = Pattern("Fleet4.png"):similar(0.99);
fleetAll = {fleet1, fleet2, fleet3, fleet4};
outOfDailyChallenge = Pattern("OutOfDailyChallenge.png"):similar(0.9);

-- Locations

-- Точки на экране

dailyLevelLoc1 = Location(486, 213);
dailyLevelLoc2 = Location(484, 354);
dailyLevelLoc3 = Location(485, 492);
dailyLevelLocAll = {dailyLevelLoc1, dailyLevelLoc2, dailyLevelLoc3};
nextDailyMode = Location(373, 341);
rightButtonLoc = Location(775, 399);
leftButtonLoc = Location(48, 399);
sortLoc = Location(489, 492);
pick1Loc = Location(105, 187);
pick2Loc = Location(283, 187);
pick3Loc = Location(450, 187);
pick4Loc = Location(622, 187);
pick5Loc = Location(794, 187);
pick6Loc = Location(966, 187);
pick7Loc = Location(1138, 187);
pickAllLoc = {pick1Loc, pick2Loc, pick3Loc, pick4Loc, pick5Loc, pick6Loc, pick7Loc};
rarityAllLoc = Location(317, 577);
rarityCommonLoc = Location(476, 582);
rarityConfirmLoc = Location(761, 669);
retireConfirmLoc1 = Location(1110, 678);
retireConfirmLoc2 = Location(1005, 631);
levelLoc = Location(1167, 39);
retireDisassembleLoc = Location(758, 489);
SelectFleetClear2 = Location(1130, 345);
SelectFleetClear3 = Location(1126, 502);
SelectFleetChoose1 = Location(1043, 209);
SelectFleetChoose2 = Location(1042, 347);
SelectFleetChoose3 = Location(1042, 501);
aviationLoc = Location(822, 610);
torpedoLoc = Location(997, 609);
artilleryLoc = Location(1222, 611);
center = getGameArea():getCenter();
moveLoc = Location(149, 589);
safeClickLoc = Location(515, 24);
sosMissionLoc = Location(1193, 523);
searchSignalLcc = Location(930, 576);

-- Main program

debugStatus("Start program");
settingsBot();
dailyMission();
sosMission();
battleMission();

print("Well done!");
